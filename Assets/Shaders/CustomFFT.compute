// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeButterflyTexture

#define PI 3.14159265359

uint Size;
uint LogSize;
RWTexture2D<float4> ButterflyTexture;

float2 EulerFormula(float x)
{
    return float2(cos(x), sin(x));
}

// ref: https://stackoverflow.com/a/37394167
uint BitReverse(uint n)
{
    uint reversedIndx;
    
    uint bits = 32 - log2(Size); // sizeof(uint) - log2(numberOfIndices);
    for (uint j = 0; j < Size; j ++)
        reversedIndx = reversebits(j << bits);

    return reversedIndx;
}

[numthreads(1,8,1)]
void ComputeButterflyTexture (uint3 id : SV_DispatchThreadID)
{
    // k value
    float k = id.y * float(Size) / pow(2, id.x + 1) % Size;
    // twiddle factor
    float2 twiddle = EulerFormula(2 * PI * k / Size);

    const float butterflyStep = pow(2, id.x);
    // To determine if the butterfly is in the top or bottom half
    float butterflyWing;

    if(id.y % pow(2, id.x + 1) < pow(2, id.x))
        butterflyWing = 1;
    else
        butterflyWing = -1;

    uint y1 = id.y;
    uint y2 = id.y;

    // Offset the y values based on the butterfly wing and step
    if(butterflyWing == 1)
        y2 += butterflyStep;
    else
        y1 -= butterflyStep;
    
    // init the starting values
    if(id.x == 0)
    {
        float yRev1 = BitReverse(y1);
        float yRev2 = BitReverse(y2);

        ButterflyTexture[id.xy] = float4(twiddle.x, twiddle.y, yRev1, yRev2);
    }
    else
    {
        ButterflyTexture[id.xy] = float4(twiddle.x, twiddle.y, y1, y2);
    }
}
